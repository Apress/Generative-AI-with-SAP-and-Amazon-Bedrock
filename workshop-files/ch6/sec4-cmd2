import json
import os
import sys
import boto3
import botocore
from hdbcli import dbapi
import pandas as pd

System = """Transform the following requests into valid SQL queries in SAP HANA dialect. Assume a database with the following tables and columns exists in schema USER1:

HOTEL:
  hno INTEGER PRIMARY KEY,
  name NVARCHAR(50) NOT NULL,
  address NVARCHAR(40) NOT NULL,
  city NVARCHAR(30) NOT NULL,
  state NVARCHAR(2) NOT NULL,
  zip NVARCHAR(6)

ROOM:
  hno INTEGER,
  type NVARCHAR(6),
  free NUMERIC(3),
  price NUMERIC(6, 2),
  PRIMARY KEY (hno, type),
  FOREIGN KEY (hno) REFERENCES HOTEL

CUSTOMER
  cno INTEGER PRIMARY KEY,
  title NVARCHAR(7),
  firstname NVARCHAR(20),
  name NVARCHAR(40) NOT NULL,
  address NVARCHAR(40) NOT NULL,
  zip NVARCHAR(6)

RESERVATION
  resno INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  rno INTEGER NOT NULL,
  cno INTEGER,
  hno INTEGER,
  type NVARCHAR(6),
  arrival DATE NOT NULL,
  departure DATE NOT NULL,
  PRIMARY KEY (
    "RESNO", "ARRIVAL"
  ),
  FOREIGN KEY(hno) REFERENCES HOTEL,
  FOREIGN KEY(cno) REFERENCES CUSTOMER

MAINTENANCE
  mno INTEGER PRIMARY KEY,
  hno INTEGER,
  description NVARCHAR(100),
  date_performed DATE,
  performed_by NVARCHAR(40)

Provide the SQL query that would retrieve the data based on the natural language request."""

#Setup boto3 client to access bedrock in a shared AWS Account
module_path = "../myutils"
#sys.path.append(os.path.abspath(module_path))
from myutils import bedrock, print_ww

# ---- ⚠️ Un-comment and edit the below lines as needed for your AWS setup ⚠️ ----
os.environ["AWS_DEFAULT_REGION"] = "us-east-1"
# os.environ["AWS_PROFILE"] = "<YOUR_PROFILE>"
# os.environ["BEDROCK_ASSUME_ROLE"] = "arn:aws:iam::<SharedAWSAccount>:role/Crossaccountbedrock"  # E.g. "arn:aws:..."

boto3_bedrock = bedrock.get_bedrock_client(
    assumed_role=os.environ.get("BEDROCK_ASSUME_ROLE", None),
    region=os.environ.get("AWS_DEFAULT_REGION", None),
    runtime=True
)

def lambda_handler(event, context):
    event_body = json.loads(event["body"])
    print(event_body)
    human_input = event_body["prompt"]
    
    res = ask_question(human_input)

    return {
        "statusCode": 200,
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
        },
        "body": json.dumps(res),
    }

def execute_query(sql_query):
    schema = "USER1"
    #Initialize your connection
    conn = dbapi.connect(
        address='<changehanaendpoint>.hana.trial-us10.hanacloud.ondemand.com',
        port='443',
        user='<changeuser>>',
        password='<changepassword>',
        encrypt=True, 
        sslValidateCertificate=True
    )
    #If no errors, print connected
    #print('connected\n')
    
    sql_result=pd.read_sql(sql_query,conn)
    #cursor = conn.cursor()
    #cursor.execute(sql_query)
    #rows = cursor.fetchall()
    #sql_result = rows
    #cursor.close()
    conn.close()
    
    return sql_result

def generate_natural_answer(question, result):
    str_list = ['Question: ', question, 'result: ', result]
    qna = ' '.join(str_list)
    body = json.dumps({
      "max_tokens": 600,
      "temperature": 0,
      "system": "Provide a concise answer for the Question and result",
      "messages": [{"role": "user", "content": qna}],
      "anthropic_version": "bedrock-2023-05-31"
    })
    response = boto3_bedrock.invoke_model(body=body, modelId="anthropic.claude-3-sonnet-20240229-v1:0")
    response_body = json.loads(response.get("body").read())
    result = response_body.get("content")
    final = result[0]['text']
    return final

def generate_sql_query(input_question):
    body = json.dumps({
      "max_tokens": 600,
      "temperature": 0,
      "system": System,
      "messages": [{"role": "user", "content": input_question}],
      "anthropic_version": "bedrock-2023-05-31"
    })
    response = boto3_bedrock.invoke_model(body=body, modelId="anthropic.claude-3-sonnet-20240229-v1:0")
    response_body = json.loads(response.get("body").read())
    result = response_body.get("content")
    parts = result[0]['text'].split('```')
    sql_statement = parts[1][3:]
    return sql_statement


def ask_question(input_text):
    sql_query = generate_sql_query(input_text)
    #print(sql_query)
    query_result = execute_query(sql_query)
    #print(query_result)
    if len(query_result) <= 1:
        return generate_natural_answer(input_text, str(query_result))
    else:
        return query_result
